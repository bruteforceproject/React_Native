{"version":3,"file":"Cli.js","sourceRoot":"","sources":["../src/Cli.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;;AAEH,kDAA0B;AAC1B,mCAAmD;AAEnD,MAAM,IAAI,GAAG,eAAK,CAAC,OAAO,CAAC;IACzB,IAAI,EAAE;QACJ,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,0BAA0B;KACrC;IACD,KAAK,EAAE;QACL,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,IAAI;QACX,QAAQ,EAAE,8CAA8C;KACzD;IACD,sBAAsB,EAAE;QACtB,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,sDAAsD;QAChE,OAAO,EAAE,KAAK;KACf;IACD,UAAU,EAAE;QACV,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,0CAA0C;QACpD,OAAO,EAAE,KAAK;KACf;IACD,cAAc,EAAE;QACd,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,mDAAmD;QAC7D,OAAO,EAAE,KAAK;KACf;IACD,UAAU,EAAE;QACV,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,wDAAwD;QAClE,OAAO,EAAE,KAAK;KACf;IACD,eAAe,EAAE;QACf,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,kBAAkB;QAC5B,OAAO,EAAE,SAAS;KACnB;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,+CAA+C;QACzD,OAAO,EAAE,KAAK;KACf;IACD,SAAS,EAAE;QACT,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,qDAAqD;QAC/D,OAAO,EAAE,aAAa;KACvB;IACD,WAAW,EAAE;QACX,IAAI,EAAE,QAAQ;QACd,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,4DAA4D;KACvE;IACD,aAAa,EAAE;QACb,OAAO,EAAE,CAAC,aAAa,EAAE,cAAc,CAAC;QACxC,QAAQ,EACN,8EAA8E;QAChF,OAAO,EAAE,aAAa;KACvB;IACD,iBAAiB,EAAE;QACjB,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,wCAAwC;QAClD,OAAO,EAAE,KAAK;KACf;CACF,CAAC,CAAC,IAAI,CAAC;AAER,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;IAC5D,OAAO,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;IAC5D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAED,IACE,IAAI,CAAC,aAAa,KAAK,aAAa;IACpC,IAAI,CAAC,aAAa,KAAK,cAAc,EACrC;IACA,OAAO,CAAC,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC1E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB;AAED,yCAAyC;AACzC,yDAAyD;AACzD,iDAAiD;AACjD,MAAM,gBAAgB,GAAG,IAAA,kBAAU,EAAiB,IAAI,CAAC,CAAC;AAE1D,IAAI,IAAI,CAAC,IAAI,IAAI,gBAAgB,EAAE;IACjC,OAAO,CAAC,KAAK,CACX,kGAAkG,CACnG,CAAC;IACF,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;CACjB","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * @format\n */\n\nimport yargs from 'yargs';\nimport {CodeGenOptions, runCodeGen} from './index';\n\nconst argv = yargs.options({\n  file: {\n    type: 'string',\n    describe: 'file which contains spec',\n  },\n  files: {\n    type: 'string',\n    array: true,\n    describe: 'glob patterns for files which contains specs',\n  },\n  modulesTypeScriptTypes: {\n    type: 'boolean',\n    describe: 'generate turbo module definition files in TypeScript',\n    default: false,\n  },\n  modulesCxx: {\n    type: 'boolean',\n    describe: 'generate C++ JSI turbo module spec files',\n    default: false,\n  },\n  modulesWindows: {\n    type: 'boolean',\n    describe: 'generate turbo module spec files for REACT_MODULE',\n    default: false,\n  },\n  methodOnly: {\n    type: 'boolean',\n    describe: 'generate only method metadata in C++ turbo module spec',\n    default: false,\n  },\n  outputDirectory: {\n    type: 'string',\n    describe: 'output directory',\n    default: 'codegen',\n  },\n  test: {\n    type: 'boolean',\n    describe: 'Verify that the generated output is unchanged',\n    default: false,\n  },\n  namespace: {\n    type: 'string',\n    describe: 'C++/C# Namespace to put generated native modules in',\n    default: 'MyNamespace',\n  },\n  libraryName: {\n    type: 'string',\n    required: true,\n    describe: 'Used for part of the path generated within the codegen dir',\n  },\n  cppStringType: {\n    choices: ['std::string', 'std::wstring'],\n    describe:\n      'C++ string type in generated code, should be \"std::string\" or \"std::wstring\"',\n    default: 'std::string',\n  },\n  separateDataTypes: {\n    type: 'boolean',\n    describe: 'generate data types in a separate file',\n    default: false,\n  },\n}).argv;\n\nif ((argv.file && argv.files) || (!argv.file && !argv.files)) {\n  console.error('You must specify either --file or --files.');\n  process.exit(1);\n}\n\nif (\n  argv.cppStringType !== 'std::string' &&\n  argv.cppStringType !== 'std::wstring'\n) {\n  console.error('cppStringType should be \"std::string\" or \"std::wstring\".');\n  process.exit(1);\n}\n\n// type casting is necessary here because\n// cppStringType does not become union of string literals\n// until yargs.options get improved in the future\nconst changesNecessary = runCodeGen(<CodeGenOptions>argv);\n\nif (argv.test && changesNecessary) {\n  console.error(\n    'There is a change in the output of codegen.  Rerun \"react-native codegen-windows\" to regenerate.',\n  );\n  process.exit(2);\n}\n"]}