{"version":3,"file":"ParamTypes.js","sourceRoot":"","sources":["../../src/generators/ParamTypes.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n'use strict';\n\nimport type {\n  NamedShape,\n  NativeModuleArrayTypeAnnotation,\n  NativeModuleBaseTypeAnnotation,\n  NativeModuleEnumDeclaration,\n  NativeModuleFunctionTypeAnnotation,\n  NativeModuleParamTypeAnnotation,\n  NativeModuleUnionTypeAnnotation,\n  Nullable,\n} from '@react-native/codegen/lib/CodegenSchema';\nimport {\n  AliasMap,\n  getAliasCppName,\n  getAnonymousAliasCppName,\n} from './AliasManaging';\nimport type {CppCodegenOptions} from './ObjectTypes';\n\ntype NativeModuleParamShape = NamedShape<\n  Nullable<NativeModuleParamTypeAnnotation>\n>;\n\ntype ParamTarget = 'spec' | 'template' | 'callback-arg' | 'method-arg';\n\nfunction decorateType(type: string, target: ParamTarget): string {\n  switch (target) {\n    case 'method-arg':\n      return `${type} &&`;\n    case 'callback-arg':\n      return `${type} const &`;\n    default:\n      return type;\n  }\n}\n\nfunction translateUnionReturnType(\n  type: NativeModuleEnumDeclaration | NativeModuleUnionTypeAnnotation,\n  target: ParamTarget,\n  options: CppCodegenOptions,\n): string {\n  const memberType = type.memberType;\n  switch (type.memberType) {\n    case 'StringTypeAnnotation':\n      return options.cppStringType;\n    case 'NumberTypeAnnotation':\n      return 'double';\n    case 'ObjectTypeAnnotation':\n      return decorateType('::React::JSValue', target);\n    default:\n      throw new Error(\n        `Unknown enum/union member type in translateReturnType: ${memberType}`,\n      );\n  }\n}\n\nfunction translateFunction(\n  param: NativeModuleFunctionTypeAnnotation,\n  aliases: AliasMap,\n  baseAliasName: string,\n  target: ParamTarget,\n  options: CppCodegenOptions,\n): string {\n  // TODO: type.returnTypeAnnotation\n  switch (target) {\n    case 'spec':\n      return `Callback<${param.params\n        .map((p: NativeModuleParamShape) =>\n          translateSpecFunctionParam(\n            p,\n            aliases,\n            `${baseAliasName}_${p.name}`,\n            options,\n          ),\n        )\n        .join(', ')}>`;\n    case 'template':\n      return `std::function<void(${param.params\n        .map((p: NativeModuleParamShape) =>\n          translateCallbackParam(\n            p,\n            aliases,\n            `${baseAliasName}_${p.name}`,\n            options,\n          ),\n        )\n        .join(', ')})>`;\n    default:\n      return `std::function<void(${param.params\n        .map((p: NativeModuleParamShape) =>\n          translateCallbackParam(\n            p,\n            aliases,\n            `${baseAliasName}_${p.name}`,\n            options,\n          ),\n        )\n        .join(', ')})> const &`;\n  }\n}\n\nfunction translateArray(\n  param: NativeModuleArrayTypeAnnotation<\n    Nullable<NativeModuleBaseTypeAnnotation>\n  >,\n  aliases: AliasMap,\n  baseAliasName: string,\n  target: ParamTarget,\n  options: CppCodegenOptions,\n): string {\n  if (param.elementType) {\n    switch (target) {\n      case 'spec':\n      case 'template':\n        return `std::vector<${translateNullableParamType(\n          param.elementType,\n          aliases,\n          `${baseAliasName}_element`,\n          'template',\n          'template',\n          options,\n        )}>`;\n      default:\n        return `std::vector<${translateNullableParamType(\n          param.elementType,\n          aliases,\n          `${baseAliasName}_element`,\n          'template',\n          'template',\n          options,\n        )}> const &`;\n    }\n  } else {\n    return decorateType('::React::JSValueArray', target);\n  }\n}\n\nfunction translateParam(\n  param: NativeModuleParamTypeAnnotation,\n  aliases: AliasMap,\n  baseAliasName: string,\n  target: ParamTarget,\n  options: CppCodegenOptions,\n): string {\n  // avoid: Property 'type' does not exist on type 'never'\n  const paramType = param.type;\n  switch (param.type) {\n    case 'StringTypeAnnotation':\n      return options.cppStringType;\n    case 'NumberTypeAnnotation':\n    case 'FloatTypeAnnotation':\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'Int32TypeAnnotation':\n      return 'int';\n    case 'BooleanTypeAnnotation':\n      return 'bool';\n    case 'FunctionTypeAnnotation':\n      return translateFunction(param, aliases, baseAliasName, target, options);\n    case 'ArrayTypeAnnotation':\n      return translateArray(param, aliases, baseAliasName, target, options);\n    case 'GenericObjectTypeAnnotation':\n      return decorateType('::React::JSValue', target);\n    case 'ObjectTypeAnnotation':\n      return decorateType(\n        getAnonymousAliasCppName(aliases, baseAliasName, param),\n        target,\n      );\n    case 'ReservedTypeAnnotation': {\n      // avoid: Property 'name' does not exist on type 'never'\n      const name = param.name;\n      // (#6597)\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (name !== 'RootTag')\n        throw new Error(`Unknown reserved function: ${name} in translateParam`);\n      return 'double';\n    }\n    case 'TypeAliasTypeAnnotation':\n      return decorateType(getAliasCppName(param.name), target);\n    case 'EnumDeclaration':\n    case 'UnionTypeAnnotation':\n      return translateUnionReturnType(param, target, options);\n    default:\n      throw new Error(`Unhandled type in translateParam: ${paramType}`);\n  }\n}\n\nfunction translateNullableParamType(\n  paramType: Nullable<NativeModuleParamTypeAnnotation>,\n  aliases: AliasMap,\n  baseAliasName: string,\n  nullableTarget: ParamTarget,\n  target: ParamTarget,\n  options: CppCodegenOptions,\n): string {\n  switch (paramType.type) {\n    case 'NullableTypeAnnotation':\n      return `std::optional<${translateParam(\n        paramType.typeAnnotation,\n        aliases,\n        baseAliasName,\n        nullableTarget,\n        options,\n      )}>`;\n    default:\n      return translateParam(paramType, aliases, baseAliasName, target, options);\n  }\n}\n\nfunction translateSpecFunctionParam(\n  param: NativeModuleParamShape,\n  aliases: AliasMap,\n  baseAliasName: string,\n  options: CppCodegenOptions,\n): string {\n  return translateNullableParamType(\n    param.typeAnnotation,\n    aliases,\n    baseAliasName,\n    'spec',\n    'spec',\n    options,\n  );\n}\n\nfunction translateCallbackParam(\n  param: NativeModuleParamShape,\n  aliases: AliasMap,\n  baseAliasName: string,\n  options: CppCodegenOptions,\n): string {\n  return translateNullableParamType(\n    param.typeAnnotation,\n    aliases,\n    baseAliasName,\n    'template',\n    'callback-arg',\n    options,\n  );\n}\n\nfunction translateFunctionParam(\n  param: NativeModuleParamShape,\n  aliases: AliasMap,\n  baseAliasName: string,\n  options: CppCodegenOptions,\n): string {\n  return translateNullableParamType(\n    param.typeAnnotation,\n    aliases,\n    baseAliasName,\n    'template',\n    'method-arg',\n    options,\n  );\n}\n\nexport function translateSpecArgs(\n  params: ReadonlyArray<NativeModuleParamShape>,\n  aliases: AliasMap,\n  baseAliasName: string,\n  options: CppCodegenOptions,\n) {\n  return params.map(param => {\n    const translatedParam = translateSpecFunctionParam(\n      param,\n      aliases,\n      `${baseAliasName}_${param.name}`,\n      options,\n    );\n    return `${translatedParam}`;\n  });\n}\n\nexport function translateArgs(\n  params: ReadonlyArray<NativeModuleParamShape>,\n  aliases: AliasMap,\n  baseAliasName: string,\n  options: CppCodegenOptions,\n) {\n  return params.map(param => {\n    const translatedParam = translateFunctionParam(\n      param,\n      aliases,\n      `${baseAliasName}_${param.name}`,\n      options,\n    );\n    return `${translatedParam} ${param.name}`;\n  });\n}\n"]}