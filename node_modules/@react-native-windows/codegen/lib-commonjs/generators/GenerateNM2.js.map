{"version":3,"file":"GenerateNM2.js","sourceRoot":"","sources":["../../src/generators/GenerateNM2.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n * @format\n */\n\n'use strict';\n\nimport type {SchemaType} from '@react-native/codegen/lib/CodegenSchema';\nimport {AliasMap, setPreferredModuleName} from './AliasManaging';\nimport {createAliasMap, generateAliases} from './AliasGen';\nimport {generateValidateConstants} from './ValidateConstants';\nimport {generateValidateMethods} from './ValidateMethods';\nimport type {CppStringTypes} from './ObjectTypes';\n\nexport type {CppStringTypes} from './ObjectTypes';\n\ntype FilesOutput = Map<string, string>;\n\nconst headerTemplate = `/*\n * This file is auto-generated from a NativeModule spec file in js.\n *\n * This is a C++ Spec class that should be used with MakeTurboModuleProvider to register native modules\n * in a way that also verifies at compile time that the native module matches the interface required\n * by the TurboModule JS spec.\n */\n#pragma once`;\n\nconst specTemplate = `::_MODULE_CUSTPM_TYPES_REFLECTION_::\nstruct ::_MODULE_NAME_::Spec : winrt::Microsoft::ReactNative::TurboModuleSpec {\n::_MODULE_MEMBERS_TUPLES_::\n\n  template <class TModule>\n  static constexpr void ValidateModule() noexcept {\n::_MODULE_MEMBERS_CHECKS_::\n\n::_MODULE_MEMBERS_ERRORS_::\n  }`;\n\nconst typeOnlyTemplate = `\n${headerTemplate}\n\n#include <string>\n#include <optional>\n#include <functional>\n#include <vector>\n\nnamespace ::_NAMESPACE_:: {\n::_MODULE_CUSTPM_TYPES_::\n} // namespace ::_NAMESPACE_::\n`;\n\nconst moduleOnlyTemplate = `\n${headerTemplate}\n\n::_TYPE_DEFINITION_INCLUDE_::\n#include <NativeModules.h>\n#include <tuple>\n\nnamespace ::_NAMESPACE_:: {\n${specTemplate}\n};\n\n} // namespace ::_NAMESPACE_::\n`;\n\nconst allInOneTemplate = `\n${headerTemplate}\n\n#include <NativeModules.h>\n#include <tuple>\n\nnamespace ::_NAMESPACE_:: {\n::_MODULE_CUSTPM_TYPES_::\n${specTemplate}\n};\n\n} // namespace ::_NAMESPACE_::\n`;\n\nexport function createNM2Generator({\n  methodOnly,\n  namespace,\n  cppStringType,\n  separateDataTypes,\n}: {\n  methodOnly: boolean;\n  namespace: string;\n  cppStringType: CppStringTypes;\n  separateDataTypes: boolean;\n}) {\n  return (\n    _libraryName: string,\n    schema: SchemaType,\n    _moduleSpecName: string,\n  ): FilesOutput => {\n    const files = new Map<string, string>();\n\n    for (const moduleName of Object.keys(schema.modules)) {\n      const nativeModule = schema.modules[moduleName];\n      // from 0.65 facebook's react-native-codegen\n      // the module name has the Native prefix comparing to 0.63\n      // when reading files we provided\n      const preferredModuleName = moduleName.startsWith('Native')\n        ? moduleName.substr(6)\n        : moduleName;\n      setPreferredModuleName(preferredModuleName);\n\n      if (nativeModule.type === 'NativeModule') {\n        console.log(`Generating Native${preferredModuleName}Spec.g.h`);\n\n        // copy all explicit to a map\n        const aliases: AliasMap = createAliasMap(nativeModule.aliasMap);\n\n        // prepare methods\n        const methods = generateValidateMethods(nativeModule, aliases, {\n          cppStringType,\n        });\n        let tuples = `\n  static constexpr auto methods = std::tuple{\n${methods[0]}\n  };`;\n        let checks = `\n    constexpr auto methodCheckResults = CheckMethods<TModule, ::_MODULE_NAME_::Spec>();`;\n        let errors = methods[1];\n\n        // prepare constants\n        const constants = generateValidateConstants(nativeModule, aliases);\n        if (constants !== undefined && !methodOnly) {\n          tuples = `\n  static constexpr auto constants = std::tuple{\n${constants[0]}\n  };${tuples}`;\n          checks = `\n    constexpr auto constantCheckResults = CheckConstants<TModule, ::_MODULE_NAME_::Spec>();${checks}`;\n          errors = `${constants[1]}\n\n${errors}`;\n        }\n\n        // generate code for structs\n        const [customTypes, customReflection] = generateAliases(aliases, {\n          cppStringType,\n        });\n\n        const customTypesExist = customTypes !== '';\n\n        const replaceContent = function (template: string): string {\n          return template\n            .replace(/::_MODULE_CUSTPM_TYPES_::/g, customTypes)\n            .replace(/::_MODULE_CUSTPM_TYPES_REFLECTION_::/g, customReflection)\n            .replace(/::_MODULE_MEMBERS_TUPLES_::/g, tuples.substring(1))\n            .replace(/::_MODULE_MEMBERS_CHECKS_::/g, checks.substring(1))\n            .replace(/::_MODULE_MEMBERS_ERRORS_::/g, errors)\n            .replace(/::_MODULE_NAME_::/g, preferredModuleName)\n            .replace(\n              /::_TYPE_DEFINITION_INCLUDE_::/g,\n              customTypesExist\n                ? `// #include \"Native${preferredModuleName}DataTypes.g.h\" before this file to use the generated type definition`\n                : '',\n            )\n            .replace(/::_NAMESPACE_::/g, namespace);\n        };\n\n        if (separateDataTypes) {\n          if (customTypesExist) {\n            files.set(\n              `Native${preferredModuleName}DataTypes.g.h`,\n              replaceContent(typeOnlyTemplate),\n            );\n          }\n          files.set(\n            `Native${preferredModuleName}Spec.g.h`,\n            replaceContent(moduleOnlyTemplate),\n          );\n        } else {\n          files.set(\n            `Native${preferredModuleName}Spec.g.h`,\n            replaceContent(allInOneTemplate),\n          );\n        }\n      }\n    }\n\n    return files;\n  };\n}\n"]}